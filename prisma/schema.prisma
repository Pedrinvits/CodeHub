generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String?
  username        String        @unique @default("default_username")
  bio             String?
  location        String?
  website         String?
  joinDate        DateTime      @default(now())
  profileImageUrl String?
  coverImageUrl   String?
  email           String?       @unique
  password        String?
  followers       Following[]   @relation("followers")
  following       Following[]   @relation("following")
  posts           Post[]
  commentLikes    CommentLike[] 
  comments        Coment[]      
  savedPosts      SavedPost[]   
  PostLike        PostLike[]   
  role            Role          @default(USER) 

  @@map("users")
}

enum Role {
  USER      
  MODERATOR 
  SUPPORT
  ADMIN     
}


model Following {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("followers", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  authorId    Int
  likes       Int      @default(0)
  saves       Int      @default(0)
  coments     Coment[]
  author      User     @relation(fields: [authorId], references: [id])
  postLikes   PostLike[] // Relacionamento com os likes em posts
  savedByUsers SavedPost[]

  @@map("posts")
}

model Coment { // Comentário de um post
  id           Int          @id @default(autoincrement())
  coment       String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  post_id      Int
  coment_likes Int          @default(0)
  post         Post         @relation(fields: [post_id], references: [id])
  commentLikes CommentLike[] // Relacionamento com os likes em comentários
  userId       Int          // Adiciona o campo userId
  user         User         @relation(fields: [userId], references: [id])

  @@map("comments")
}


model PostLike { // Relacionamento de like em posts
  id       Int    @id @default(autoincrement())
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([postId, userId]) // Um usuário pode dar like em um post apenas uma vez
  @@map("post_likes")
}

model CommentLike { // Relacionamento de like em comentários
  id        Int     @id @default(autoincrement())
  coment    Coment  @relation(fields: [comentId], references: [id])
  comentId  Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([comentId, userId]) // Um usuário pode dar like em um comentário apenas uma vez
  @@map("comment_likes")
}

model SavedPost {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Um usuário pode salvar um post apenas uma vez
  @@map("saved_posts")
}
